AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with AWS ECS/Fargate cluster, public and private subnets, VPC endpoints, and NACLs.
Parameters:
  CountryCode:
    Type: String
    Default: au
  EnvironmentName:
    Type: String
    Default: test
    Description: "Your deployment environment: dev, test, qa, prod"
  CIDRRange:
    Type: Number
    Default: 0
  # MultiNat:
  #   Type: String
  #   AllowedValues: [true, false]
  #   Default: false  
       
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are four subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  # 10.0.2.0 - 10.0.2.255
  # 10.0.3.0 - 10.0.3.255

   SubnetConfig:
    VPC:
      IP: '0'
    PublicOne:
      IP: '0'
    PublicTwo:
      IP: '1'
    PrivateOne:
      IP: '2'    
    PrivateTwo:
      IP: '3'    
    # VaultPrivateOne:
    #   IP: '4'    
    # VaultPrivateTwo:
    #   IP: '5'    
    # ConfigPrivateOne:
    #   IP: '6'    
    # ConfigPrivateTwo:
    #   IP: '7'
      
# Conditions:
#   UsesMultiNat: !Equals [!Ref MultiNat, "true"]
      
Resources:
  # VPC in which containers will be networked.
  # It has two public subnets, and two private subnets.
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Sub
        - '10.${CIDRRange}.${IP}.0/20'
        - { CIDRRange: !Ref CIDRRange, IP: !FindInMap ['SubnetConfig', 'VPC', 'IP'] }
      Tags:
        - Key: Name
          Value: !Sub ${CountryCode}_${EnvironmentName}_vpc  
        

  #Set up for the "public" services

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub
        - '10.${CIDRRange}.${IP}.0/24'
        - { CIDRRange: !Ref CIDRRange, IP: !FindInMap ['SubnetConfig', 'PublicOne', 'IP'] }
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${CountryCode}_${EnvironmentName}_public-subnet-one
  
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub
        - '10.${CIDRRange}.${IP}.0/24'
        - { CIDRRange: !Ref CIDRRange, IP: !FindInMap ['SubnetConfig', 'PublicTwo', 'IP'] }
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${CountryCode}_${EnvironmentName}_public-subnet-two
      
  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
      
  # Attaching a Internet Gateway to route table makes it public.    
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      
  # Attaching a public route table makes a subnet public.
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup NACLs for public subnets to restrict access for only HTTP and HTTPS traffic from web
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref 'VPC'
       Tags:
       - Key: Name
         Value: NACLforWebTraffic

  # Write Inbound and Outbound rules for public NACL
  PublicHttpInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PublicNetworkAcl
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80
  PublicHttpsInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PublicNetworkAcl
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443
  PublicOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PublicNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0

  # Asscoiate public NACL to the public subnet
  PublicSubnetOneNetworkAclAssociation:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId: !Ref PublicSubnetOne
        NetworkAclId: !Ref PublicNetworkAcl

  # Asscoiate public NACL to the public subnet
  PublicSubnetTwoNetworkAclAssociation:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId: !Ref PublicSubnetTwo
        NetworkAclId: !Ref PublicNetworkAcl


  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    # Condition: UsesMultiNat
    DependsOn: GatewayAttachment
    Properties:
        Domain: vpc

  #NAT gateway resource creates a network address translation (NAT) gateway in the specified public subnet. 
  #Use a NAT gateway to allow instances in a private subnet to connect to the Internet or to other AWS services, 
  #but prevent the Internet from initiating a connection with those instances.
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    # Condition: UsesMultiNat
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo   

  # Two private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub
        - '10.${CIDRRange}.${IP}.0/24'
        - { CIDRRange: !Ref CIDRRange, IP: !FindInMap ['SubnetConfig', 'PrivateOne', 'IP'] }
      Tags:
        -
          Key: Name
          Value: !Sub ${CountryCode}_${EnvironmentName}_private-subnet-one  
      
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub
        - '10.${CIDRRange}.${IP}.0/24'
        - { CIDRRange: !Ref CIDRRange, IP: !FindInMap ['SubnetConfig', 'PrivateTwo', 'IP'] }
      Tags:
        -
          Key: Name
          Value: !Sub ${CountryCode}_${EnvironmentName}_private-subnet-two  
 
  # Each private subnet gets to go through a NAT to the outside internet. 
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo


  # Setup NACLs for private subnets to restrict access for only HTTP and HTTPS traffic and MySQL port (3306)
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref 'VPC'
       Tags:
       - Key: Name
         Value: NACLforPrivateTraffic

  # Write Inbound and Outbound rules for public NACL
  PrivateHttpInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PrivateNetworkAcl
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80
  PrivateHttpsInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PrivateNetworkAcl
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443
  PrivateMySQLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PrivateNetworkAcl
       RuleNumber: 120
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 3306
         To: 3306
  PrivateOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PrivateNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0

  # Asscoiate Private NACL to the Private subnet
  PrivateSubnetOneNetworkAclAssociation:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId: !Ref PrivateSubnetOne
        NetworkAclId: !Ref PrivateNetworkAcl

  # Asscoiate Private NACL to the Private subnet
  PrivateSubnetTwoNetworkAclAssociation:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId: !Ref PrivateSubnetTwo
        NetworkAclId: !Ref PrivateNetworkAcl

      
  # ECS Resources - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#
  # TODO: Define a cluster with an ECS Exec configuration defined
  # TODO: Define a cluster with the environment specific AWS Fargate capacity providers 
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${CountryCode}_${EnvironmentName}_ecs-cluster
      Configuration:
         ExecuteCommandConfiguration:
            Logging: DEFAULT
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub ${CountryCode}_${EnvironmentName}_ecs-cluster  
          

 # OPTIONAL: VPC Endpoint for ECR, s3, and CloudWatch
  # If a container needs to access to a service, this allows a container in the private subnet
  # to talk to that service directly without needing to go via the NAT gateway, public ips, and internet
  # - without the need of VPN etc
  # It goes through the AWS backbone network, privately and securely.
  EcrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Principal: "*"
            Resource: "*"
      SubnetIds:
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'
      ServiceName: !Join [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".ecr.dkr" ] ]
      VpcId: !Ref 'VPC'

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      # VpcEndpointType: Gateway
      PrivateDnsEnabled: false
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Principal: "*"
            Resource: "*"
      RouteTableIds:
        - !Ref 'PrivateRouteTableOne'
        - !Ref 'PrivateRouteTableTwo'
      ServiceName: !Join [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ]
      VpcId: !Ref 'VPC'

  LogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Principal: "*"
            Resource: "*"
      SubnetIds:
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'
      ServiceName: !Join [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".logs" ] ]
      VpcId: !Ref 'VPC'



# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because some of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Sub ${CountryCode}:${EnvironmentName}:vpc
  PublicSubnetOne:
    Description: Public Subnet One
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Sub ${CountryCode}:${EnvironmentName}:public-subnet-one
  PublicSubnetTwo:
    Description: Public Subnet Two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Sub ${CountryCode}:${EnvironmentName}:public-subnet-two
  PrivateSubnetOne:
    Description: Private Subnet One
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Sub ${CountryCode}:${EnvironmentName}:private-subnet-one
  PrivateSubnetTwo:
    Description: Private Subnet Two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Sub ${CountryCode}:${EnvironmentName}:private-subnet-two  
  ECSCluster:
    Description: Ecs Cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Sub ${CountryCode}:${EnvironmentName}:ecs-cluster
          